import json
from functools import partial
from signal import SIGCONT, SIGSTOP
from typing import IO, Iterable, Iterator

from .block import Block
from .element import BaseElement
from .logging import logger


class OutputGenerator:
    """Assemble blocks generated by elements into a status line."""

    def __init__(
        self,
        elements: Iterable[BaseElement],
        click_events=False,
    ) -> None:
        self.elements = list(elements)
        self.click_events = click_events

    def blocks(self) -> Iterator[Block]:
        for element in self.elements:
            try:
                yield from element.blocks()
            except Exception:
                logger.exception(f"Exception while getting blocks for {element}")

    def process(self, file: IO[str]) -> Iterator[list[Block]]:
        send = partial(print, file=file, flush=True)
        send(
            json.dumps(
                dict(
                    version=1,
                    stop_signal=SIGSTOP,
                    cont_signal=SIGCONT,
                    click_events=self.click_events,
                )
            )
        )
        send("[[]")
        while True:
            blocks = list(self.blocks())
            send(",{}".format(json.dumps(list(map(Block.dict, blocks)))))
            yield blocks
